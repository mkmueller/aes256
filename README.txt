

# aes256
`import "github.com/mkmueller/aes256"`

* [Overview](#pkg-overview)
* [Index](#pkg-index)
* [Examples](#pkg-examples)

## <a name="pkg-overview">Overview</a>
The aes256 package provides simplified encryption and decryption functions
using the standard crypto/aes package. It implements a 256 bit key length and
the GCM cipher.  The key may be a string of at least one character with an
optional hash iteration value.  The encrypted output may be a byte slice or a
base-64 encoded string.




## <a name="pkg-index">Index</a>
* [func Decrypt(key string, ciphertext []byte) ([]byte, error)](#Decrypt)
* [func DecryptB64(key string, ciphertext string) ([]byte, error)](#DecryptB64)
* [func Encrypt(key string, plaintext []byte) ([]byte, error)](#Encrypt)
* [func EncryptB64(key string, plaintext []byte) (string, error)](#EncryptB64)
* [type Cipher](#Cipher)
  * [func New(key string, rehash ...int) (*Cipher, error)](#New)
  * [func (ci *Cipher) Decrypt(ciphertext []byte) ([]byte, error)](#Cipher.Decrypt)
  * [func (ci *Cipher) DecryptB64(b64str string) ([]byte, error)](#Cipher.DecryptB64)
  * [func (ci *Cipher) Encrypt(plaintext []byte) ([]byte, error)](#Cipher.Encrypt)
  * [func (ci *Cipher) EncryptB64(plaintext []byte) (string, error)](#Cipher.EncryptB64)

#### <a name="pkg-examples">Examples</a>
* [Cipher.Decrypt](#example_Cipher_Decrypt)
* [Cipher.DecryptB64](#example_Cipher_DecryptB64)
* [Cipher.Encrypt](#example_Cipher_Encrypt)
* [Cipher.EncryptB64](#example_Cipher_EncryptB64)
* [Decrypt](#example_Decrypt)
* [DecryptB64](#example_DecryptB64)
* [Encrypt](#example_Encrypt)
* [EncryptB64](#example_EncryptB64)
* [New](#example_New)

#### <a name="pkg-files">Package files</a>
[aes256.go](/src/github.com/mkmueller/aes256/aes256.go) 





## <a name="Decrypt">func</a> [Decrypt](/src/target/aes256.go?s=4193:4252#L188)
``` go
func Decrypt(key string, ciphertext []byte) ([]byte, error)
```
Decrypt accepts a key string and a ciphertext byte array. It returns a
decrypted byte array.



## <a name="DecryptB64">func</a> [DecryptB64](/src/target/aes256.go?s=4467:4529#L199)
``` go
func DecryptB64(key string, ciphertext string) ([]byte, error)
```
DecryptB64 accepts a key string and a base-64 encoded ciphertext string.
It returns a decrypted byte array.



## <a name="Encrypt">func</a> [Encrypt](/src/target/aes256.go?s=3662:3720#L166)
``` go
func Encrypt(key string, plaintext []byte) ([]byte, error)
```
Encrypt accepts a key string and a plaintext byte array. It returns an
encrypted byte array.



## <a name="EncryptB64">func</a> [EncryptB64](/src/target/aes256.go?s=3931:3992#L177)
``` go
func EncryptB64(key string, plaintext []byte) (string, error)
```
Encrypt accepts a key string and a plaintext byte array. It returns an
encrypted base-64 encoded string.




## <a name="Cipher">type</a> [Cipher](/src/target/aes256.go?s=770:804#L32)
``` go
type Cipher struct {
    // contains filtered or unexported fields
}
```






### <a name="New">func</a> [New](/src/target/aes256.go?s=1127:1179#L45)
``` go
func New(key string, rehash ...int) (*Cipher, error)
```
New accepts a key string and an optional rehash value.  The supplied key will
be rehashed the number of times indicated by the optional rehash value.  A
new Cipher instance will be returned.





### <a name="Cipher.Decrypt">func</a> (\*Cipher) [Decrypt](/src/target/aes256.go?s=2398:2458#L111)
``` go
func (ci *Cipher) Decrypt(ciphertext []byte) ([]byte, error)
```
Decrypt accepts a ciphertext byte array and returns a plaintext byte array.




### <a name="Cipher.DecryptB64">func</a> (\*Cipher) [DecryptB64](/src/target/aes256.go?s=3376:3435#L155)
``` go
func (ci *Cipher) DecryptB64(b64str string) ([]byte, error)
```
DecryptB64 accepts a base-64 encoded ciphertext string and returns a
decrypted byte array.




### <a name="Cipher.Encrypt">func</a> (\*Cipher) [Encrypt](/src/target/aes256.go?s=1647:1706#L72)
``` go
func (ci *Cipher) Encrypt(plaintext []byte) ([]byte, error)
```
Encrypt accepts a plaintext byte array and returns an encrypted byte array.




### <a name="Cipher.EncryptB64">func</a> (\*Cipher) [EncryptB64](/src/target/aes256.go?s=3058:3120#L144)
``` go
func (ci *Cipher) EncryptB64(plaintext []byte) (string, error)
```
EncryptB64 accepts a plaintext byte array and returns an encrypted base-64
encoded ciphertext string.








- - -
Generated by [godoc2md](http://godoc.org/github.com/davecheney/godoc2md)
